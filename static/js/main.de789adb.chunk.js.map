{"version":3,"sources":["hooks/useChat.tsx","hooks/useInput.ts","components/NicknameScreen.tsx","components/MessageList.tsx","components/MessageInput.tsx","components/InfoMessage.tsx","components/UserMessage.tsx","utils/getRandomColor.ts","containers/Chat.tsx","App.tsx","index.tsx"],"names":["ActionTypes","useInput","onEnter","useState","value","setValue","handleChange","useCallback","target","handleSetValue","trim","handleEnterDown","key","NicknameScreen","nickNameInputRef","useRef","useLayoutEffect","current","focus","handleNicknameInputFocus","nickname","className","onClick","type","ref","onChange","onKeyDown","MessageList","messages","lastMessageRef","scrollIntoView","behavior","map","Message","index","MessageInput","onTyping","message","messageInputRef","typing","lastTyping","isTyping","handleInput","Date","getTime","setTimeout","onInput","placeholder","InfoMessage","text","UserMessage","nicknameColor","style","color","createAction","payload","JSON","stringify","initialState","colors","typings","reducer","state","LOGIN","numUsers","produce","draft","push","USER_JOINED","USER_LEFT","username","TYPING","NEW_MESSAGE","Math","random","toString","Component","STOP_TYPING","filter","useChat","address","socket","setSocket","useReducer","dispatch","useEffect","ws","WebSocket","onopen","send","ADD_USER","onmessage","action","data","split","parse","readAction","interval","setInterval","close","clearInterval","handleCreateMessage","handleTyping","Chat","nickName","setNickName","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de789adb.chunk.js","sourcesContent":["import React, { FC, useCallback, useEffect, useReducer, useState } from 'react';\nimport produce from 'immer';\n\nimport { InfoMessage } from '../components/InfoMessage';\nimport { UserMessage } from '../components/UserMessage';\n\nimport { getRandomColor } from '../utils/getRandomColor';\n\nenum ActionTypes {\n  ADD_USER = 'add user',\n  LOGIN = 'login',\n  USER_JOINED = 'user joined',\n  USER_LEFT = 'user left',\n  TYPING = 'typing',\n  STOP_TYPING = 'stop typing',\n  NEW_MESSAGE = 'new message'\n}\n\ntype UserNamePayload = { username: string; };\ntype UserCountPayload = { numUsers: string; };\ntype MessagePayload = { message: string; };\n\ntype ActionPayload = string\n  | UserNamePayload\n  | UserCountPayload\n  | UserNamePayload & MessagePayload\n  | UserNamePayload & UserCountPayload;\n\ntype Action = { type: ActionTypes; payload?: ActionPayload };\n\nconst createAction = ({ type, payload }: Action) => {\n  return `42${JSON.stringify([type, payload])}`;\n};\n\nconst readAction = (data: string) => {\n  const [, action] = data.split('42');\n  return action && JSON.parse(action);\n};\n\ninterface InitialState {\n  colors: { [key: string]: string };\n  typings: { [key: string]: FC; };\n  messages: Array<FC>;\n}\n\nconst initialState: InitialState = {\n  colors: {},\n  typings: {},\n  messages: []\n};\n\nconst reducer = (state: InitialState, { type, payload }: Action) => {\n  switch (type) {\n    case ActionTypes.LOGIN: {\n      const { numUsers } = payload as UserCountPayload;\n\n      return produce(state, draft => {\n        draft.messages.push(() => <InfoMessage text={ `Welcome to Very Native Socket Chat` }/>);\n        draft.messages.push(() => <InfoMessage text={ `there are ${numUsers} participants` }/>);\n\n        return draft;\n      });\n    }\n    case ActionTypes.USER_JOINED:\n    case ActionTypes.USER_LEFT: {\n      return produce(state, draft => {\n        const { username, numUsers } = payload as UserNamePayload & UserCountPayload;\n\n        draft.messages.push(() => <InfoMessage text={ `${username} ${type === ActionTypes.USER_JOINED ? 'joined' : 'left'}` }/>);\n        draft.messages.push(() => <InfoMessage text={ `there are ${numUsers} participants` }/>);\n\n        return draft\n      });\n    }\n    case ActionTypes.TYPING:\n    case ActionTypes.NEW_MESSAGE: {\n      const { username, message } = payload as UserNamePayload & MessagePayload;\n\n      return produce(state, draft => {\n        let nicknameColor = state.colors[username];\n\n        if (!nicknameColor) {\n          draft.colors[username] = nicknameColor = getRandomColor();\n        }\n\n        if (type === ActionTypes.NEW_MESSAGE) {\n          draft.messages.push(() => <UserMessage nickname={username} message={message} nicknameColor={ nicknameColor }/>);\n        } else {\n          const Component = () => <UserMessage nickname={username} nicknameColor={ nicknameColor } isTyping/>;\n\n          draft.typings[username] = Component;\n          draft.messages.push(Component);\n        }\n\n        return draft;\n      })\n    }\n    case ActionTypes.STOP_TYPING: {\n      const { username } = payload as UserNamePayload;\n\n      return produce(state, draft => {\n        draft.messages = state.messages.filter(filter => filter !== state.typings[username]);\n\n        return draft;\n      })\n    }\n    default: return state;\n  }\n};\n\ntype UseChat = (\n  nickname: string,\n  address: string\n) => {\n  state: InitialState;\n  handleCreateMessage: (message: string) => void;\n  handleTyping: (isTyping: boolean) => void;\n};\n\nexport const useChat: UseChat = (nickname: string, address: string) => {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    if (nickname) {\n      const ws = new WebSocket(address);\n\n      setSocket(ws);\n\n      ws.onopen = () => {\n        ws.send(createAction({ type: ActionTypes.ADD_USER, payload: nickname }));\n      };\n\n      ws.onmessage = ({ data }) => {\n        const action = readAction(data);\n\n        if (action) {\n          const [type, payload] = action;\n\n          dispatch({ type, payload });\n        }\n      };\n\n      const interval = setInterval(\n        () => ws.send('2'),\n        20 * 1000\n      );\n\n      return () => {\n        ws.close(1000);\n        clearInterval(interval);\n      };\n    }\n  }, [nickname, address]);\n\n  const handleCreateMessage = useCallback((message: string) => {\n    socket?.send(\n      createAction({\n        type: ActionTypes.NEW_MESSAGE,\n        payload: message\n      })\n    );\n    dispatch({\n      type: ActionTypes.NEW_MESSAGE,\n      payload: { message, username: nickname }\n    });\n  }, [socket, nickname]);\n\n  const handleTyping = useCallback(\n    (isTyping: boolean) => socket?.send(\n      createAction({\n        type: isTyping\n          ? ActionTypes.TYPING\n          : ActionTypes.STOP_TYPING,\n        payload: { username: nickname }\n      })\n    ),\n    [socket, nickname]\n  );\n\n  return { state, handleCreateMessage, handleTyping };\n};\n","import { useCallback, useState } from 'react';\n\nexport const useInput = (onEnter: (value: string) => void) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = useCallback(\n    ({ target: { value } }) => setValue(value),\n    []\n  );\n\n  const handleSetValue = useCallback(() => {\n    if ((value || '').trim()) {\n      onEnter(value);\n      setValue('');\n    }\n  }, [onEnter, value]);\n\n  const handleEnterDown = useCallback(({ key }) => {\n    if (key === 'Enter') {\n      handleSetValue();\n    }\n  }, [handleSetValue]);\n\n  return { value, handleChange, handleEnterDown, handleSetValue };\n};\n","import React, { FC, useCallback, useLayoutEffect, useRef } from 'react';\n\nimport { useInput } from '../hooks/useInput';\n\ninterface Props {\n  onEnter: (nick: string) => void;\n}\n\nexport const NicknameScreen: FC<Props> = ({ onEnter }) => {\n  const nickNameInputRef = useRef<HTMLInputElement>(null);\n\n  useLayoutEffect(() => {\n    nickNameInputRef.current!.focus();\n  }, [nickNameInputRef]);\n\n  const handleNicknameInputFocus = useCallback(\n    () => nickNameInputRef.current!.focus(),\n    [nickNameInputRef]\n  );\n\n  const { value: nickname, handleChange, handleEnterDown, handleSetValue } = useInput(onEnter);\n\n  return (\n    <div\n      className='h-screen bg-gradient-to-r from-yellow-400 via-red-500 to-pink-500 flex justify-center items-center'\n      onClick={handleNicknameInputFocus}\n    >\n      <div>\n        <h4 className='text-white text-center mb-2'>What's your nickname?</h4>\n        <input\n          type='text'\n          ref={nickNameInputRef}\n          className='text-center w-full mb-2 text-lg focus:outline-none'\n          value={nickname}\n          onChange={handleChange}\n          onKeyDown={handleEnterDown}\n        />\n        <button\n          className='from-gray-200 w-full bg-white px-2'\n          onClick={handleSetValue}>\n          Join\n        </button>\n      </div>\n    </div>\n  )\n};\n","import React, { FC, useLayoutEffect, useRef } from 'react';\n\ninterface Props {\n  messages: Array<FC>;\n  className?: string;\n}\n\nexport const MessageList: FC<Props> = ({ messages, className = '' }) => {\n  const lastMessageRef = useRef<HTMLLIElement>(null);\n\n  useLayoutEffect(() => {\n    lastMessageRef.current!.scrollIntoView({ behavior: 'smooth' });\n  }, [lastMessageRef, messages]);\n\n  return (\n    <ul className={`flex flex-col w-full p-2 ${className}`}>\n      { messages.map((Message, index) => (\n        <li key={index}>\n          <Message />\n        </li>\n      )) }\n      <li ref={lastMessageRef}/>\n    </ul>\n  )\n};\n","import React, { FC, useCallback, useLayoutEffect, useRef } from 'react';\n\nimport { useInput } from '../hooks/useInput';\n\ninterface Props {\n  className?: string;\n  onEnter: (message: string) => void;\n  onTyping: (isTyping: boolean) => void;\n}\n\nexport const MessageInput: FC<Props> = ({ onEnter, onTyping, className = '' }) => {\n  const { value: message, handleChange, handleEnterDown, handleSetValue } = useInput(onEnter);\n  const messageInputRef = useRef<HTMLInputElement>(null);\n  const typing = useRef({ lastTyping: 0, isTyping: false });\n\n  useLayoutEffect(\n    () => messageInputRef.current?.focus(),\n    [messageInputRef]\n  );\n\n  const handleInput = useCallback(() => {\n    typing.current.lastTyping = (new Date()).getTime();\n\n    if (!typing.current.isTyping) {\n      typing.current.isTyping = true;\n      onTyping(true);\n    }\n\n    setTimeout(() => {\n      const typingTimer = (new Date()).getTime();\n\n      if (typingTimer - typing.current.lastTyping >= 400 && typing.current.isTyping) {\n        typing.current.isTyping = false;\n        onTyping(false);\n      }\n    }, 400);\n  }, [onTyping]);\n\n  return (\n    <footer className={`flex w-full h-12 ${className}`}>\n      <input\n        type='text'\n        ref={messageInputRef}\n        className='w-full h-full mr-2 focus:outline-none p-2'\n        onChange={handleChange}\n        onKeyDown={handleEnterDown}\n        onInput={handleInput}\n        value={message}\n        placeholder='Type here...'\n      />\n      <button\n        className='from-gray-200 bg-white px-2'\n        onClick={handleSetValue}>\n        Send\n      </button>\n    </footer>\n  )\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  text: string;\n  className?: string;\n}\n\nexport const InfoMessage: FC<Props> = ({ text, className = '' }) => (\n  <p className={`text-gray-400 text-center ${className}`}>{text}</p>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  nickname: string;\n  message?: string;\n  isTyping?: boolean;\n  nicknameColor: string;\n}\n\nexport const UserMessage: FC<Props> = ({ nickname, isTyping, message, nicknameColor }) => {\n  return (isTyping || !!message) ? (\n    <div className=''>\n      <span className='font-bold text-xl mr-2' style={{ color: nicknameColor }}>{nickname}:</span>\n      { isTyping ? (\n        <span>is typing...</span>\n      ) : (\n        <span className='break-words'>{message}</span>\n      ) }\n    </div>\n  ) : null;\n};\n","export const getRandomColor = () => '#' + ((1<<24) * Math.random() | 0).toString(16);\n","import React, { FC, useState } from 'react';\n\nimport { NicknameScreen } from '../components/NicknameScreen';\nimport { MessageList } from '../components/MessageList';\nimport { MessageInput } from '../components/MessageInput';\n\nimport { useChat } from '../hooks/useChat';\n\nexport const Chat: FC = () => {\n  const [nickName, setNickName] = useState('');\n  const { state: { messages }, handleCreateMessage, handleTyping } = useChat(\n    nickName,\n    'wss://socketio-chat-h9jt.herokuapp.com/socket.io/?EIO=3&transport=websocket'\n  );\n\n  if (!nickName) {\n    return <NicknameScreen onEnter={setNickName} />;\n  }\n\n  return (\n    <main className='h-screen w-full flex flex-col'>\n      <MessageList\n        messages={messages}\n        className='h-full overflow-auto'\n      />\n      <MessageInput\n        onEnter={handleCreateMessage}\n        onTyping={handleTyping}\n        className='p-2 bg-gray-900'\n      />\n    </main>\n  )\n};\n","import React from 'react';\n\nimport { Chat } from './containers/Chat';\n\n\nfunction App() {\n  return <Chat />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}